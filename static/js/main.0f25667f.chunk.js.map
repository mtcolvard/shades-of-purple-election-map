{"version":3,"sources":["components/Optionsfield.js","components/Legend.js","components/Tooltip.js","Maps.js","App.js","reportWebVitals.js","index.js"],"names":["Optionsfield","props","className","classNames","options","map","option","i","onChange","changeState","checked","property","name","type","year","Legend","stateKey","useState","null","statePurpleRating","legendProps_mostRepublican","setLegendProps_mostRepublican","legendProps_mostDemocrat","setLegendProps_mostDemocrat","legendProps_mostPurpleState","setLegendProps_mostPurpleState","legendProps_scale","keysOfStateKey","Object","keys","electionYearDataDem","electionData","active","dem_data","electionYearDataRep","rep_data","electionYearVoterTurnout","ceil","participation","toPrecision","protestVote","protest_vote","useEffect","findMostPolarizedStates","findleastPolarizedState","purpleScale","scaleLinear","domain","range","mostPartisanDemFIPS_id","maxBy","o","mostPartisanRepFIPS_id","mostPartisanDemState","mostPartisanRepState","mostPartisanDemStateVotePercent","mostPartisanRepStateVotePercent","mostPartisanDemColorRatio","mostPartisanRepColorRatio","demPurpleShade","repPurpleShade","forEach","stateId","Math","abs","toFixed","lowestPurpleValue","minBy","values","mostPurpleStateFIPS_id","find","mostPurpleState","mostPurpleStateVoteDifference","mostPurpleStateColorRatio","mostPurpleStatePurpleShade","centristVoteDifference","toString","concat","legendProps_otherInfo","renderData","item","style","backgroundColor","description","backgroundImage","Tooltip","feature","id","properties","current","State","mapboxgl","accessToken","process","Maps","mapContainerRef","useRef","activeRef","setActive","setMap","tooltipRef","Popup","offset","closeButton","closeOnClick","fillColorExpression","fillOpacityExpression","bounds","Map","container","center","zoom","attributionControl","trackResize","doubleClickZoom","scrollZoom","fitBoundsOptions","padding","left","right","top","bottom","addControl","AttributionControl","customAttribution","compact","on","addSource","addLayer","setPaintProperty","e","getCanvas","cursor","hoveredStateId","features","length","setFeatureState","source","sourceLayer","hover","remove","queryRenderedFeatures","point","tooltipNode","document","createElement","ReactDOM","render","setLngLat","lngLat","setDOMContent","addTo","paint","ref","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.0f25667f.chunk.js","sourcesContent":["import React from \"react\"\n\nconst Optionsfield = (props) => {\n  const renderOptions = (option, i) => {\n    return (\n      <label key={i} className=\"toggle-container toggle-group--s\">\n        <input\n          onChange={() =>\n            props.changeState(i)\n        }\n          checked={option.property === props.property}\n          name=\"toggle-small\"\n          type=\"radio\"\n        />\n        <div className=\"toggle toggle--s txt-s  px12-mm toggle--active-white toggle-padding\">\n          {option.year}\n        </div>\n      </label>\n    )\n  }\n  return (\n    <div className={props.classNames}>\n      {props.options.map(renderOptions)}\n    </div>\n  )\n}\n\nexport default Optionsfield\n","import React, { useState, useEffect} from 'react'\nimport electionData from '../data_for_legend_calculations_minus_dc.json'\nimport ceil from 'lodash/ceil'\nimport maxBy from 'lodash/maxBy'\nimport minBy from 'lodash/minBy'\nimport keys from 'lodash/keys'\nimport values from 'lodash/values'\nimport { scaleLinear } from 'd3-scale'\n\nconst Legend = (props) => {\n  const stateKey = {\n  '01': 'Alabama','02': 'Alaska', '04': 'Arizona', '05': 'Arkansas', '06': 'California', '08': 'Colorado', '09': 'Connecticut', '10': 'Delaware', '11': 'District of Columbia', '12': 'Florida', '13': 'Georgia', '15': 'Hawaii', '16': 'Idaho', '17': 'Illinois', '18': 'Indiana', '19': 'Iowa', '20': 'Kansas', '21': 'Kentucky', '22': 'Louisiana', '23': 'Maine', '24': 'Maryland', '25': 'Massachusetts', '26': 'Michigan', '27': 'Minnesota', '28': 'Mississippi', '29': 'Missouri', '30': 'Montana', '31': 'Nebraska', '32': 'Nevada', '33': 'New Hampshire', '34': 'New Jersey', '35': 'New Mexico', '36': 'New York', '37': 'North Carolina', '38': 'North Dakota', '39': 'Ohio', '40': 'Oklahoma', '41': 'Oregon', '42': 'Pennsylvania', '44': 'Rhode Island', '45': 'South Carolina', '46': 'South Dakota', '47': 'Tennessee', '48': 'Texas', '49': 'Utah', '50': 'Vermont', '51': 'Virginia', '53': 'Washington', '54': 'West Virginia', '55': 'Wisconsin', '56': 'Wyoming'}\n\n  const [statePurpleRating, setStatePurpleRating] = useState({null: null})\n  const [legendProps_mostRepublican, setLegendProps_mostRepublican] = useState([[null]])\n  const [legendProps_mostDemocrat, setLegendProps_mostDemocrat] = useState([[null]])\n  const [legendProps_mostPurpleState, setLegendProps_mostPurpleState] = useState([[null]])\n  const [legendProps_scale] = useState([['Reference Spectrum:', null, null, '#800080']])\n\n  const keysOfStateKey = Object.keys(stateKey)\n  const electionYearDataDem = electionData[props.active.dem_data]\n  const electionYearDataRep = electionData[props.active.rep_data]\n  const electionYearVoterTurnout = ceil(electionData[props.active.participation]['155']*100, 3).toPrecision(3)\n  const protestVote = ceil(electionData[props.active.protest_vote]['155']*100, 2).toPrecision(3)\n\n  useEffect(() => {\n    findMostPolarizedStates()\n  }, [props.active])\n\n  useEffect(() => {\n    findleastPolarizedState()\n  }, [props.active])\n\n  const purpleScale = scaleLinear()\n  .domain([0, 100])\n  .range(['#FF0000', '#0000FF'])\n\n  const findMostPolarizedStates = () => {\n    const mostPartisanDemFIPS_id = maxBy(keys(electionYearDataDem), o => electionYearDataDem[o])\n    const mostPartisanRepFIPS_id = maxBy(keys(electionYearDataRep), o => electionYearDataRep[o])\n    const mostPartisanDemState = stateKey[mostPartisanDemFIPS_id]\n    const mostPartisanRepState = stateKey[mostPartisanRepFIPS_id]\n    const mostPartisanDemStateVotePercent = electionYearDataDem[mostPartisanDemFIPS_id]\n    const mostPartisanRepStateVotePercent = electionYearDataRep[mostPartisanRepFIPS_id]\n    const mostPartisanDemColorRatio = (mostPartisanDemStateVotePercent/(mostPartisanDemStateVotePercent+(electionYearDataRep[mostPartisanDemFIPS_id])))*100\n    const mostPartisanRepColorRatio = (1-(mostPartisanRepStateVotePercent/((electionYearDataDem[mostPartisanRepFIPS_id])+mostPartisanRepStateVotePercent)))*100\n    const demPurpleShade = purpleScale(mostPartisanDemColorRatio)\n    const repPurpleShade = purpleScale(mostPartisanRepColorRatio)\n\n    const legendProps_mostRepublican = [['Most Republican: ', mostPartisanRepState, (ceil(mostPartisanRepStateVotePercent*100)), repPurpleShade]]\n    setLegendProps_mostRepublican(legendProps_mostRepublican)\n\n    const legendProps_mostDemocrat = [['Most Democrat: ', mostPartisanDemState, (ceil(mostPartisanDemStateVotePercent*100)), demPurpleShade]]\n    setLegendProps_mostDemocrat(legendProps_mostDemocrat)\n  }\n\n  const findleastPolarizedState = () => {\n    keysOfStateKey.forEach((stateId) => {\n      statePurpleRating[stateId] = Math.abs(electionYearDataDem[stateId] - electionYearDataRep[stateId]).toFixed(6)\n    })\n    const lowestPurpleValue = minBy(values(statePurpleRating))\n    const mostPurpleStateFIPS_id = Object.keys(statePurpleRating).find(mostPurpleStateFIPS_id => statePurpleRating[mostPurpleStateFIPS_id] === lowestPurpleValue)\n    const mostPurpleState = stateKey[mostPurpleStateFIPS_id]\n    const mostPurpleStateVoteDifference = Math.abs(electionYearDataDem[mostPurpleStateFIPS_id]-electionYearDataRep[mostPurpleStateFIPS_id])\n    const mostPurpleStateColorRatio = (electionYearDataDem[mostPurpleStateFIPS_id]/(electionYearDataDem[mostPurpleStateFIPS_id]+(electionYearDataRep[mostPurpleStateFIPS_id])))*100\n    const mostPurpleStatePurpleShade = purpleScale(mostPurpleStateColorRatio)\n    const plusMinus = '±'\n    const centristVoteDifference = (ceil(mostPurpleStateVoteDifference*100, 2)).toString()\n\n    const legendProps_mostPurpleState = [['Most Centrist: ', mostPurpleState, plusMinus.concat( centristVoteDifference), mostPurpleStatePurpleShade]]\n    setLegendProps_mostPurpleState(legendProps_mostPurpleState)\n  }\n\n  const legendProps_otherInfo = [['Voter Turnout:', null, ceil(electionYearVoterTurnout, 4), null], [' Votes 3rd-Party:', null, protestVote, null]]\n\n\n\n    const renderData = (item, i) => {\n    return (\n      <div key={i} className=\"txt-s mb2\">\n        <div className=\"grid gridLines grid--gut3  flex-parent flex-parent--row-reverse\">\n          <span\n            className=\"col--1 h18 inline-block  flex-child\"\n            style={{ backgroundColor: '#800080' }}\n          />\n          <span\n            className=\"col--1  h18 inline-block  flex-child\"\n            style={{ backgroundColor: item[3] }}\n          />\n          <span className=\"col--2  flex-child\">{`${item[2]}%`}</span>\n          <span className=\"col fl   flex-child\">{`${item[1]}`}</span>\n          <span className=\"col--4 txt-s txt-bold inline-block flex-child\">{`${item[0]}`}</span>\n        </div>\n      </div>\n    )\n  }\n\n  const renderScaleInfo = (item, i) => {\n    return (\n      <div key={i} className=\"txt-s mb2\">\n        <div className=\"grid gridLines grid--gut3 flex-parent flex-parent--row-reverse\">\n          <div className=\"col--2  h18 inline-block  flex-child\" style={{ backgroundImage: 'linear-gradient(to right, #FF0000 0%,  #800080 50%, #0000FF 100%)'}}>\n          </div>\n          <span className=\"col ml-neg3 txt-s txt-bold flex-child\">{`${item[0]}`}</span>\n        </div>\n      </div>\n    )\n  }\n\n\n  const renderOtherInfo = (item, i) => {\n    return(\n      <div key={i} className=\"txt-s mb2\">\n        <div className=\"grid gridLines grid--gut3 flex-parent flex-parent--row-reverse\">\n          <div className=\"col--2  h18 inline-block  flex-child\" style={{ backgroundImage: '#FFFFFF'}}></div>\n          <span className=\"col--2 txt-s flex-child\">{`${item[2]}%`}</span>\n          <span className=\"col txt-s txt-bold  flex-child\"></span>\n          <span className=\"col ml-neg3 txt-s txt-bold inline-block flex-child\">{`${item[0]}`}</span>\n        </div>\n      </div>\n\n    )\n  }\n\n  return (\n    <>\n      <div className={props.classNames}>\n        <div className=\"mb6\">\n          <h2 className=\"txt-bold txt-l mb6 ml-neg3\">{props.active.description} </h2>\n        </div>\n        {legendProps_scale.map(renderScaleInfo)}\n        {legendProps_mostRepublican.map(renderData)}\n        {legendProps_mostDemocrat.map(renderData)}\n        {legendProps_mostPurpleState.map(renderData)}\n        <div className=\"pt6\">\n        {legendProps_otherInfo.map(renderOtherInfo)}\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport default Legend\n","import React from 'react'\n\nconst Tooltip = ({feature, active}) => {\n  const { id, properties } = feature\n  const {dem_data, rep_data } = active.current\n\n  return (\n    <div id={`tooltip-${id}`} className=\"mt-neg6 mb-neg12 ml-neg6 \">\n      <div className= \"txt-h5\" >{properties.State}</div>\n        <div className=\"inline-block w42 h18 color-gray-faint txt-h6 txt-bold px3\"\n          style={{ backgroundColor: '#FF0000' }}>\n          {(properties[rep_data]*100).toFixed(1)}%</div>\n        <br />\n        <div className=\"inline-block w42 h18 color-gray-faint txt-h6 txt-bold px3\"\n          style={{ backgroundColor: '#0000FF' }}>\n        {(properties[dem_data]*100).toFixed(1)}%</div>\n    </div>\n  )\n}\nexport default Tooltip\n","import React, {useRef, useEffect, useState } from 'react'\nimport ReactDOM from 'react-dom'\nimport mapboxgl from 'mapbox-gl'\nimport './Map.css'\nimport Optionsfield from './components/Optionsfield'\nimport Legend from './components/Legend'\nimport Tooltip from './components/Tooltip'\n\nmapboxgl.accessToken = process.env.REACT_APP_MAPBOX_KEY\n\nconst Maps = () => {\n\n  const options = [\n    {\n      year: '2020',\n      description: '2020 Election',\n      property: 'pct_purple_2020',\n      dem_data: 'dem_total_2020',\n      rep_data: 'rep_total_2020',\n      participation: \"voter_turnout_2020\",\n      protest_vote: \"protest_vote_2020\",\n    },\n    {\n      year: '2016',\n      description: '2016 Election',\n      property: 'pct_purple_2016',\n      dem_data: 'dem_total_2016',\n      rep_data: 'rep_total_2016',\n      participation: \"voter_turnout_2016\",\n      protest_vote: \"protest_vote_2016\"\n\n    },\n    {\n      year: '2012',\n      description: '2012 Election',\n      property: 'pct_purple_2012',\n      dem_data: 'dem_total_2012',\n      rep_data: 'rep_total_2012',\n      participation: \"voter_turnout_2012\",\n      protest_vote: \"protest_vote_2012\"\n\n    },\n    {\n      year: '2008',\n      description: '2008 Election',\n      property: 'pct_purple_2008',\n      dem_data: 'dem_total_2008',\n      rep_data: 'rep_total_2008',\n      participation: \"voter_turnout_2008\",\n      protest_vote: \"protest_vote_2008\"\n\n    },\n    {\n      year: '2004',\n      description: '2004 Election',\n      property: 'pct_purple_2004',\n      dem_data: 'dem_total_2004',\n      rep_data: 'rep_total_2004',\n      participation: \"voter_turnout_2004\",\n      protest_vote: \"protest_vote_2004\"\n    },\n    {\n      year: '2000',\n      description: '2000 Election',\n      property: 'pct_purple_2000',\n      dem_data: 'dem_total_2000',\n      rep_data: 'rep_total_2000',\n      participation: \"voter_turnout_2000\",\n      protest_vote: \"protest_vote_2000\"\n    },\n    {\n      year: '1996',\n      description: '1996 Election',\n      property: 'pct_purple_1996',\n      dem_data: 'dem_total_1996',\n      rep_data: 'rep_total_1996',\n      participation: \"voter_turnout_1996\",\n      protest_vote: \"protest_vote_1996\"\n    },\n    {\n      year: '1992',\n      description: '1992 Election',\n      property: 'pct_purple_1992',\n      dem_data: 'dem_total_1992',\n      rep_data: 'rep_total_1992',\n      participation: \"voter_turnout_1992\",\n      protest_vote: \"protest_vote_1992\"\n    },\n    {\n      year: '1988',\n      description: '1988 Election',\n      property: 'pct_purple_1988',\n      dem_data: 'dem_total_1988',\n      rep_data: 'rep_total_1988',\n      participation: \"voter_turnout_2020\",\n      protest_vote: \"protest_vote_2020\"\n    }\n  ]\n\n  const mapContainerRef = useRef(null)\n  const activeRef = useRef(options[0])\n  const [active, setActive] = useState(options[0])\n  const [map, setMap] = useState(null)\n\n  const tooltipRef = useRef(new mapboxgl.Popup({\n    // anchor: 'left',\n    offset: 15,\n    closeButton: true,\n    closeOnClick: false,\n    className: 'my-1'\n  }))\n\n  const fillColorExpression = ['interpolate', ['linear'], ['*', ['to-number', ['get', active.property]], 100], 0, '#ff0000', 100, '#0000ff']\n  const fillOpacityExpression = ['case', ['boolean', ['feature-state', 'hover'], false], 1, 1]\n  const bounds = [[-122.121674, 21.199061], [-69.915619,48.365146]]\n\n\n  useEffect(() => {\n      const map = new mapboxgl.Map({\n        container: mapContainerRef.current,\n        style: 'mapbox://styles/mtcolvard/ckiwk8jxb4vpf19pfm556o1dq',\n        center: [-96.09, 38.83],\n        zoom: 2.1,\n        attributionControl: true,\n        trackResize: true,\n        doubleClickZoom: false,\n        scrollZoom: false,\n        bounds: bounds,\n        fitBoundsOptions: { padding: {left:20, right:20, top:5, bottom:5}},\n      })\n      // map.scrollZoom.disable()\n\n      map.addControl(new mapboxgl.AttributionControl({customAttribution: ['Data: census.gov','electproject.org'], compact: false}), 'bottom-left')\n\n      map.on('load', () => {\n        map.addSource('vectorElectionNumbers', {\n          'type': 'vector',\n          'url': 'mapbox://mtcolvard.9cx8ngi9',\n        })\n\n      map.addLayer({\n       'id': 'vector-fill-layer',\n       'type': 'fill',\n       'source': 'vectorElectionNumbers',\n       'source-layer': 'elections_vector_and_data',\n      })\n\n      map.setPaintProperty('vector-fill-layer', 'fill-color', fillColorExpression)\n      map.setPaintProperty('vector-fill-layer', 'fill-opacity', fillOpacityExpression)\n      map.on('mouseenter', 'vector-fill-layer', (e) => {\n          map.getCanvas().style.cursor = 'pointer'\n        })\n      map.on('mouseleave', 'vector-fill-layer', (e) => {\n        map.getCanvas().style.cursor = ''\n      })\n\n      let hoveredStateId = null\n      map.on('mousemove', 'vector-fill-layer', (e) => {\n        if (e.features.length > 0) {\n          if (hoveredStateId) {\n            map.setFeatureState({\n              source: 'vectorElectionNumbers',\n              sourceLayer: 'elections_vector_and_data',\n              id: hoveredStateId\n            }, {\n              hover: false\n            })\n          }\n          hoveredStateId = e.features[0].id\n          map.setFeatureState({\n            source: 'vectorElectionNumbers',\n            sourceLayer: 'elections_vector_and_data',\n            id: hoveredStateId\n          }, {\n            hover: true\n          })\n        }\n      })\n      map.on('mouseleave', 'vector-fill-layer', () => {\n        if (hoveredStateId) {\n          map.setFeatureState({\n            source: 'vectorElectionNumbers',\n            sourceLayer: 'elections_vector_and_data',\n            id: hoveredStateId\n          }, {\n              hover: false\n            })\n          tooltipRef.current\n            .remove()\n          }\n        hoveredStateId = null\n      })\n      map.on('mousemove', (e) => {\n        const features = map.queryRenderedFeatures(e.point)\n        if (features.length) {\n          const feature = features[0]\n          const tooltipNode = document.createElement('div')\n          // tooltipNode.setAttribute('style', 'margin-right: -24px;')\n          ReactDOM.render(<Tooltip feature={feature} active={activeRef}/>, tooltipNode)\n          tooltipRef.current\n            .setLngLat(e.lngLat)\n            .setDOMContent(tooltipNode)\n            .addTo(map)\n          }\n        })\n      setMap(map)\n    })\n    return () => map.remove()\n  }, [])\n\n  useEffect(() => {\n    paint()\n  }, [active])\n\n  const paint = () => {\n    if (map) {\n      map.setPaintProperty('vector-fill-layer', 'fill-color', fillColorExpression)\n      map.setPaintProperty('vector-fill-layer', 'fill-opacity', fillOpacityExpression)\n    }\n  }\n\n  const changeState = i => {\n    setActive(options[i])\n    activeRef.current = options[i]\n    map.setPaintProperty('vector-fill-layer', 'fill-color', fillColorExpression)\n    map.setPaintProperty('vector-fill-layer', 'fill-opacity', fillOpacityExpression)\n  }\n\n  return (\n    <div className=\"divOne\">\n      <div className=\"divTwo\">\n          <div  className='headline pt18 pb24'>\n            <h1 className='lineOne py12-mm align-center w-full'> We are much less polarized than the Electoral College map makes us believe.\n            </h1>\n          </div>\n          <div className='mt6'>\n            <h4 className='lineTwo txt-h4 txt-h2-mm align-center '> There are no <span className=\"red-state\"> red</span><span> states or  </span><span className=\"blue-state\">blue</span> states.</h4>\n            <h4 className=\"lineTwo txt-h4 txt-h2-mm align-center \">Honestly, we're mostly all just shades of purple.</h4>\n          </div>\n        <div className=\"flex-parent flex-parent--column\">\n        <div ref={mapContainerRef} className=\"map-container align-middle hmin240 h300-mm mt18-mm mb30-mm mx36-mm  flex-child\" />\n      <div className=\"flex-child absolute bottom w-full mb12-mm\">\n        <div className=\"grid\">\n            <div className=\"col col--6-mm col--offl3-mm z5 z1-mm bg-white shadow-darken10 round\">\n              <div className=\"align-center\">\n                <Optionsfield\n                  options={options}\n                  property={active.property}\n                  changeState={changeState}\n                  classNames={\"toggle-group toggle-group--s relative bottom mb3 border border--2 border--white bg-white shadow-darken10 z5\"}\n                />\n              </div>\n              <div>\n                <Legend active={active} classNames={\" right-mm z5 pt6 pb12 px24  \"} />\n              </div>\n            </div>\n        </div>\n        </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Maps\n\n// <div className=\"flex-child z5 z1-mm bg-white shadow-darken10 round  mr3-mm mb3-mm  mx30-mm\">\n","import React from 'react'\nimport Maps from './Maps'\n\nfunction App() {\n  return (\n    <div className=\"divZero\">\n      <Maps />\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}